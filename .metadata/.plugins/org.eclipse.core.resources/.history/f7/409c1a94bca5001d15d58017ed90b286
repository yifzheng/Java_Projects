import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;
import javax.swing.JPanel;

public class GamePanel extends JPanel implements ActionListener{
	
	// variables necessary for the game
	
	// dimensions of the screen
	static final int SCREEN_WIDTH = 700;
	static final int SCREEN_HEIGHT = 600;
	
	// unit size
	static final int UNIT_SIZE = 25; // how big we want objects in the game to be
	static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / UNIT_SIZE;
	
	// delay
	static final int DELAY = 80;
	
	// coordinates of the snake
	// max size of snake is always less than the dimensions of the screen
	final int x[] = new int[GAME_UNITS]; // holds x-coordinate of the body parts of the snake including head of snake
	final int y[] = new int[GAME_UNITS]; // holds y-coordinate of the body parts of the snake including head of snake
	
	int bodyParts = 5;// initial body parts of the snake
	int applesEaten; // number of fruits eaten by the snake
	int appleX; // x-coordinate of where the apple is located
	int appleY; // y-coordinate of the apple
	char direction = 'R'; // initial direction the snake is moving; R = right; L = left; U = up; D = down
	boolean running = false; // boolean to keep check if game is running
	Timer timer;
	Random random; // instance of the random class
	
	// constructor for the class
	GamePanel(){
		random = new Random(); // initialize instance of random class
		this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT)); // set the size of the panel with screen dimensions
		this.setBackground(Color.black);
		this.setFocusable(true); // focusable indicates whether this Component is focusable
		this.addKeyListener(new MyKeyAdapter()); // add a key listener with MyKeyAdapter class as parameter
		startGame(); // call startGame method to start the game once GamePanel() is called in main class
	}
	// method used to start the game
	public void startGame() {
		newApple(); // create new apple on the screen;
		running = true; // the game is now running
		timer = new Timer(DELAY, this); // set how fast the game is running
		timer.start(); // start  timer
	}
	// calls the UI's delegated paint method; puts graphics onto the screen
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		draw(g);
	}
	// method to draw the graphics
	public void draw(Graphics g) {
		if (running) {
			// turn screen into a grid for better visualization: VERTICAL LINE
			for (int i = 0; i < SCREEN_WIDTH / UNIT_SIZE; i++) {
				g.drawLine(i * UNIT_SIZE, 0, i * UNIT_SIZE, SCREEN_HEIGHT);
			}
			// turn screen into a grid for better visualization: HORIZONTAL LINE
			for (int i = 0; i < SCREEN_HEIGHT / UNIT_SIZE; i++) {
				g.drawLine(0, i * UNIT_SIZE,   SCREEN_WIDTH, i * UNIT_SIZE);
			}
			// setting color of the apple
			g.setColor(Color.red);
			g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
			
			// draw head and body of snake
			// loop through snake
			for (int i = 0; i < bodyParts; i++) {
				if (i == 0) { // head of the snake
					g.setColor(Color.green);
					g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
				else { // this is body of snake
					g.setColor(new Color(45, 180, 30));
					g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
			}
			
			// draw score
			g.setColor(Color.red);
			g.setFont(new Font("Ink Free", Font.BOLD, 35));
			// use font metrics to center text
			FontMetrics metrics = getFontMetrics(g.getFont());
			g.drawString("Score: " + applesEaten, (SCREEN_WIDTH - metrics.stringWidth("Score: " + applesEaten)) / 2, g.getFont().getSize());
		}
		else {
			gameOver(g);
		}
	}
	// method to populate apple randomly on the map whenever we start the game or snake eats the apple
	public void newApple() {
		appleX = random.nextInt((int)(SCREEN_WIDTH / UNIT_SIZE)) * UNIT_SIZE; // someplace along the x-axis; parameter makes sure apple spawns within the grid
		appleY = random.nextInt((int)(SCREEN_HEIGHT / UNIT_SIZE)) * UNIT_SIZE; // same as appleX
	}
	// moving the snake with this method
	public void move() {
		 // for loop to iterate through body parts of the snake
		for (int i = bodyParts; i > 0; i--) {
			x[i] = x[i - 1]; // shifting all coordinates of snake by 1
			y[i] = y[i - 1];
		}
		
		// direction in which the x,y coordinates will move
		// x[0] & y[0] are head of the snake
		switch(direction) {
		case'U':
			y[0] = y[0] - UNIT_SIZE;
			break;
		case'D':
			y[0] = y[0] + UNIT_SIZE;
			break;
		case'R':
			x[0] = x[0] + UNIT_SIZE;
			break;
		case'L':
			x[0] = x[0] - UNIT_SIZE;
			break;
		}
	}
	// check if snake ate the apple
	public void checkApple() {
		if ((x[0] == appleX) && (y[0] == appleY)) { // snake eaten apple
			bodyParts++; // increment bodyPart
			applesEaten++;
			newApple();
		}
	}
	// check if snake collided with boundaries of the screen
	public void checkCollisions() {
		// checks if head collided with the body
		for (int i = bodyParts; i > 0; i--) {
			if ((x[0] == x[i]) && (y[0] == y[i])) { 
				running = false; // trigger game over
			}
		}
		
		// checks if head collided with left boundary
		if (x[0] < 0) {
			running = false;
		}
		// checks if head collided with right boundary
		if (x[0] > SCREEN_WIDTH) {
			running = false;
		}
		// checks if head collided with top boundary
		if (y[0] <0) {
			running = false;
		}
		// checks if head collided with bottom boundary
		if (y[0] > SCREEN_HEIGHT) {
			running = false;
		}
		
		// stop timer is running is false
		if (!running) {
			timer.stop();
		}
		
	}
	public void gameOver(Graphics g) {
		// game over text
		g.setColor(Color.red);
		g.setFont(new Font("Ink Free", Font.BOLD, 75));
		// use font metrics to center text
		FontMetrics metrics = getFontMetrics(g.getFont());
		g.drawString("GAME OVER", (SCREEN_WIDTH - metrics.stringWidth("GAME OVER")) / 2, SCREEN_HEIGHT / 2);
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		
		// check if game is running
		if (running) {
			//move our snake
			move();
			// check apple snake collision
			checkApple();
			// check collisions between snake boundaries
			checkCollisions();
		}
		// if game not running, repaint the screen
		repaint();
		
	}
	
	// inner class called MyKeyAdapter to check key pressed by player
	public class MyKeyAdapter extends KeyAdapter {
		@Override
		public void keyPressed(KeyEvent e) {
			switch(e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if (direction != 'R') {
					direction = 'L';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if (direction != 'L') {
					direction = 'R';
				}
				break;
			case KeyEvent.VK_UP:
				if (direction != 'D') {
					direction = 'U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if (direction != 'U') {
					direction = 'D';
				}
				break;
			}
		}
	}

}
